# 依存更新の場合、アプリケーションのバージョンは変えずにデプロイする
name: Web Auto Deploy Dependencies
on:
  push:
    branches: [main]

jobs:
  check-and-deploy:
    environment: web
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 2

      - name: Check if last commit was from dependency update
        id: check-deps
        run: |
          LAST_COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          LAST_COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          echo "Last commit message: $LAST_COMMIT_MESSAGE"
          echo "Last commit author: $LAST_COMMIT_AUTHOR"

          if echo "$LAST_COMMIT_MESSAGE" | grep -E "(renovate|dependabot)" > /dev/null || \
            echo "$LAST_COMMIT_AUTHOR" | grep -E "(renovate|dependabot)" > /dev/null; then
            echo "is_dep_update=true" >> $GITHUB_OUTPUT
            echo "Dependency update detected - proceeding with deployment"
          else
            echo "is_dep_update=false" >> $GITHUB_OUTPUT
            echo "No dependency update detected - skipping deployment"
          fi

      - name: Setup pnpm
        if: steps.check-deps.outputs.is_dep_update == 'true'
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4

      - name: Setup Node.js
        if: steps.check-deps.outputs.is_dep_update == 'true'
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version-file: ".node-version"
          cache: "pnpm"

      - name: Install dependencies
        if: steps.check-deps.outputs.is_dep_update == 'true'
        run: pnpm install --frozen-lockfile

      - name: Build
        if: steps.check-deps.outputs.is_dep_update == 'true'
        run: pnpm run build

      - name: Deploy to Cloudflare Pages
        if: steps.check-deps.outputs.is_dep_update == 'true'
        uses: cloudflare/wrangler-action@da0e0dfe58b7a431659754fdf3f186c529afbe65 # v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy packages/web/dist --project-name=ac6-assemble-tool --commit-dirty=true
